package events

import (
	"encoding/json"
	"log/slog"

	"github.com/kptm-tools/common/common/enums"
	cmmn "github.com/kptm-tools/common/common/events"
	"github.com/kptm-tools/vulnerability-analysis/pkg/interfaces"
	"github.com/nats-io/nats.go"
)

func SubscribeToScanStarted(
	bus cmmn.EventBus,
	nmapHandler interfaces.INmapHandler,
) error {
	bus.Subscribe(string(enums.ScanStartedEventSubject), func(msg *nats.Msg) {

		go func(msg *nats.Msg) {

			slog.Info("Received ScanStartedEvent")
			// 1. Parse the message payload
			var payload cmmn.ScanStartedEvent

			if err := json.Unmarshal(msg.Data, &payload); err != nil {
				slog.Error("Received invalid JSON payload", slog.Any("payload", msg.Data))
				// 1.1 Publish scan failed
				return
			}

			slog.Debug("Received payload", slog.Any("payload", payload))
			// 2. Call our handlers for each tool
			c := nmapHandler.RunScan(payload)

			for result := range c {
				if result.Err != nil {
					slog.Error("Encountered error running Nmap Scan", slog.Any("error", result.Err))
				}

			}
			// 3. Publish the result
			slog.Info("Finished analyzing vulnerabilities", slog.String("scanID", payload.ScanID))
		}(msg)
	})

	return nil
}
