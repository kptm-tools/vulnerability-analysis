package handlers

import (
	"log/slog"

	"github.com/kptm-tools/common/common/enums"
	"github.com/kptm-tools/common/common/events"
	"github.com/kptm-tools/vulnerability-analysis/pkg/interfaces"
)

type NmapHandler struct {
	nmapService interfaces.INmapService
}

var _ interfaces.INmapHandler = (*NmapHandler)(nil)

func NewNmapHandler(nmapService interfaces.INmapService) *NmapHandler {
	return &NmapHandler{
		nmapService: nmapService,
	}
}

func (h *NmapHandler) RunScan(event events.ScanStartedEvent) <-chan interfaces.ServiceResult {
	c := make(chan interfaces.ServiceResult)
	defer close(c)
	var targets []string
	domains := event.GetDomainValues()
	ips := event.GetIPValues()

	targets = append(targets, domains...)
	targets = append(targets, ips...)

	results, err := h.nmapService.RunScan(targets)
	if err != nil {
		slog.Error("Error running nmap scan", slog.Any("error", err))
	}

	for _, res := range results {
		slog.Info("Nmap scan summary",
			slog.Any("target", res.Target),
			slog.Any("summary", res.Results[enums.ServiceNmap]))
	}

	c <- interfaces.ServiceResult{
		ScanID:      event.ScanID,
		ServiceName: enums.ServiceNmap,
		Result:      results,
		Err:         err,
	}

	return c

}
