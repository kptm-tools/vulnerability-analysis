package handlers

import (
	"fmt"

	"github.com/kptm-tools/common/common/events"
	"github.com/kptm-tools/vulnerability-analysis/pkg/interfaces"
)

type NmapHandler struct {
	nmapService interfaces.INmapService
}

var _ interfaces.INmapHandler = (*NmapHandler)(nil)

func NewNmapHandler(nmapService interfaces.INmapService) *NmapHandler {
	return &NmapHandler{
		nmapService: nmapService,
	}
}

func (h *NmapHandler) RunScan(event events.ScanStartedEvent) error {
	// TODO: Implementation pending
	var targets []string
	for _, target := range event.Targets {
		targets = append(targets, target.Value)
	}

	results, err := h.nmapService.RunScan(targets)
	if err != nil {
		return err
	}

	for _, result := range results {
		fmt.Println(result.String())
	}

	return nil

}
