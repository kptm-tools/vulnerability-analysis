package handlers

import (
	"context"
	"log/slog"

	"github.com/kptm-tools/common/common/events"
	cmmn "github.com/kptm-tools/common/common/results"
	"github.com/kptm-tools/vulnerability-analysis/pkg/interfaces"
)

type NmapHandler struct {
	nmapService interfaces.INmapService
}

var _ interfaces.INmapHandler = (*NmapHandler)(nil)

func NewNmapHandler(nmapService interfaces.INmapService) *NmapHandler {
	return &NmapHandler{
		nmapService: nmapService,
	}
}

func (h *NmapHandler) RunScan(ctx context.Context, event events.ScanStartedEvent) <-chan cmmn.ToolResult {
	c := make(chan cmmn.ToolResult)

	go func() {
		defer close(c)

		// Run scan
		result, err := h.nmapService.RunScan(ctx, event.Target)

		// Check for context cancellation
		if ctx.Err() != nil {
			if ctx.Err() == context.Canceled {
				slog.Warn("Scan was canceled",
					slog.String("scanID", event.ScanID),
					slog.Any("target", event.Target),
				)
			}
			return
		}

		// Handle scan errors
		if err != nil {
			slog.Error("Error running nmap scan",
				slog.String("scanID", event.ScanID),
				slog.Any("error", err))
		}

		// Log results
		slog.Info("Nmap scan summary",
			slog.Any("target", event.Target),
			slog.Any("summary", result.Result))

		// Send scan results
		c <- result
	}()

	return c

}
