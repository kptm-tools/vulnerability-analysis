package services

import (
	"errors"
	"fmt"
	"net/url"
	"strings"

	"github.com/kptm-tools/vulnerability-analysis/pkg/dto"
)

var ErrInvalidCPE = errors.New("invalid CPE name")

func fetchNvdDataByCPE(cpe string) (*dto.NvdApiResponse, error) {
	// Validate CPE
	if err := isValidCPE(cpe); err != nil {
		return nil, fmt.Errorf("invalid CPE: %w", err)
	}

	// baseNvdApiURL := "https://services.nvd.nist.gov/rest/json/cves/2.0"
	query := url.Values{}
	query.Set("cpeName", cpe)

	return nil, nil
}

func isValidCPE(cpe string) error {
	parts := strings.Split(cpe, ":")

	if len(parts) != 13 {
		return fmt.Errorf("%w: must have 13 colon-separated parts, got %d", ErrInvalidCPE, len(cpe))
	}

	if parts[0] != "cpe" {
		return fmt.Errorf("%w: must start with 'cpe', got '%s'", ErrInvalidCPE, parts[0])
	}

	if parts[1] != "2.3" {
		return fmt.Errorf("%w: must have '2.3' as the second part (CPE Version), got '%s'", ErrInvalidCPE, parts[1])
	}

	componentsToCheck := []struct {
		index int
		name  string
	}{
		{index: 2, name: "part"},
		{index: 3, name: "vendor"},
		{index: 4, name: "product"},
		{index: 5, name: "version"},
	}

	for _, comp := range componentsToCheck {
		if parts[comp.index] == "*" {
			return fmt.Errorf("%w: %s component must not be '*'", ErrInvalidCPE, parts[comp.index])
		}
	}

	return nil
}
