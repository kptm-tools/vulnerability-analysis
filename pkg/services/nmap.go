package services

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"strings"
	"time"

	"github.com/Ullaakut/nmap/v2"
	"github.com/kptm-tools/common/common/enums"
	cmmn "github.com/kptm-tools/common/common/results"
	"github.com/kptm-tools/vulnerability-analysis/pkg/interfaces"
)

type NmapService struct {
	Logger *slog.Logger
}

var _ interfaces.INmapService = (*NmapService)(nil)

func NewNmapService() *NmapService {
	return &NmapService{
		Logger: slog.New(slog.Default().Handler()),
	}

}

func (s *NmapService) RunScan(targets []string) ([]cmmn.TargetResult, error) {
	fmt.Println("Running nmap scanner...")

	timeout := 240 * len(targets)
	ctx, cancel := context.WithTimeout(
		context.Background(),
		time.Duration(timeout)*time.Second,
	)
	defer cancel()

	scanner, err := nmap.NewScanner(
		nmap.WithTargets(targets...),
		nmap.WithMostCommonPorts(100),
		nmap.WithServiceInfo(),
		nmap.WithSkipHostDiscovery(),
		nmap.WithOSDetection(),
		nmap.WithOSScanGuess(),
		nmap.WithScripts("vulners"),
		nmap.WithContext(ctx),
	)
	if err != nil {
		return nil, err
	}

	res, warnings, err := scanner.Run()
	if warnings != nil {
		s.Logger.Warn("Nmap raised warnings:", slog.Any("nmap_warnings", warnings))
	}

	if err != nil {
		if ctx.Err() == context.DeadlineExceeded {
			return nil, fmt.Errorf("scan timeout after %d seconds", timeout)
		}
		return nil, fmt.Errorf("scan error: %w", err)
	}

	s.Logger.Info("Nmap done: ", slog.Int("hosts_up", len(res.Hosts)), slog.Any("time_elapsed", res.Stats.Finished.Elapsed))

	results := s.procesScanResults(res)

	return results, nil
}

func (s *NmapService) procesScanResults(res *nmap.Run) []cmmn.TargetResult {
	var targetResults []cmmn.TargetResult

	for _, host := range res.Hosts {
		if len(host.Ports) == 0 || len(host.Addresses) == 0 {
			s.Logger.Warn("No ports or addressed found", slog.Any("host", host))
			continue
		}

		h := &cmmn.NmapResult{
			HostName:    parseHostName(host),
			HostAddress: parseHostAddress(host),
		}

		// OS Detection
		os := getMostLikelyOS(host)
		h.MostLikelyOS = os

		for _, port := range host.Ports {
			p := cmmn.PortData{
				ID:       port.ID,
				Protocol: port.Protocol,
				Service: cmmn.Service{
					Name:       port.Service.Name,
					Version:    port.Service.Version,
					Confidence: port.Service.Confidence,
				},
				Product: port.Service.Product,
				State:   port.State.State,
			}

			for _, script := range port.Scripts {

				vulns, err := s.ParseVulnersScript(script)
				if err != nil {
					s.Logger.Error("Error parsing Vulners Script", slog.Any("error", err))
					continue
				}

				p.Vulnerabilities = append(p.Vulnerabilities, vulns...)
			}

			h.ScannedPorts = append(h.ScannedPorts, p)
		}
		s.Logger.Debug("Nmap scan for host completed", slog.Any("nmap_result", h))

		targetResult := cmmn.TargetResult{
			Target:  h.HostName,
			Results: map[enums.ServiceName]interface{}{enums.ServiceNmap: h},
		}
		targetResults = append(targetResults, targetResult)

	}

	return targetResults

}

// getMostLikelyOS checks for most likely OS considering TCP matches
func getMostLikelyOS(host nmap.Host) string {
	if len(host.OS.Matches) == 0 {
		return ""
	}

	mostLikely := ""
	maxAccuracy := 0
	for _, match := range host.OS.Matches {
		if match.Accuracy > maxAccuracy {
			mostLikely = match.Name
			maxAccuracy = match.Accuracy
		}
	}

	return mostLikely
}

func parseHostName(host nmap.Host) string {
	// If host type is IP, we won't get a Hostname
	var hostName string

	if len(host.Hostnames) > 0 {
		hostName = host.Hostnames[0].Name
	}

	return hostName
}

func parseHostAddress(host nmap.Host) string {
	var hostAddress string

	if len(host.Addresses) > 0 {
		hostAddress = host.Addresses[0].Addr
	}

	return hostAddress
}

func (s *NmapService) ParseVulnersScript(script nmap.Script) ([]cmmn.Vulnerability, error) {
	if script.ID != "vulners" {
		return nil, fmt.Errorf("script ID is not 'vulners': %s", script.ID)
	}

	var vulnerabilities []cmmn.Vulnerability

	for _, table := range script.Tables {
		for _, subTable := range table.Tables {

			vulnMap := map[string]string{}
			for _, element := range subTable.Elements {
				// Store elements in a temporary Map
				vulnMap[element.Key] = element.Value
			}

			// Build Vulnerability Struct
			if id, exists := vulnMap["id"]; exists {
				var vuln cmmn.Vulnerability
				vuln.ID = id

				// Parse Type
				if typeStr, ok := vulnMap["type"]; ok {
					vuln.Type = typeStr
				}

				// Parse CVSS
				if cvssStr, ok := vulnMap["cvss"]; ok {
					cvss, err := strconv.ParseFloat(strings.TrimSpace(cvssStr), 64)
					if err != nil {
						s.Logger.Error("Error parsing CVSS", slog.String("port_id", id), slog.Any("error", err))
					} else {
						vuln.CVSS = cvss
					}
				}

				// Parse Exploitable
				if exploitableStr, ok := vulnMap["is_exploit"]; ok {
					exploitable, err := strconv.ParseBool(exploitableStr)
					if err != nil {
						s.Logger.Error("Error parsing is_exploit", slog.String("port_id", id), slog.Any("error", err))
					} else {
						vuln.Exploitable = exploitable
					}
				}

				vuln.BuildVulnersReferences()
				vulnerabilities = append(vulnerabilities, vuln)
			}

		}
	}

	return vulnerabilities, nil
}
