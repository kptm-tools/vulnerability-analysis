package services

import (
	"context"
	"fmt"
	"log/slog"
	"net"
	"strconv"
	"strings"
	"time"

	"github.com/Ullaakut/nmap/v2"
	"github.com/kptm-tools/common/common/pkg/enums"
	"github.com/kptm-tools/common/common/pkg/results/tools"
	"github.com/kptm-tools/vulnerability-analysis/pkg/interfaces"
)

type NmapService struct {
	Logger *slog.Logger
}

var _ interfaces.INmapService = (*NmapService)(nil)

func NewNmapService() *NmapService {
	return &NmapService{
		Logger: slog.New(slog.Default().Handler()),
	}

}

func (s *NmapService) RunScan(ctx context.Context, target string) (tools.ToolResult, error) {
	s.Logger.Info("Starting Nmap scan...", slog.String("target", target))

	// Combine timeout and cancellation contexts
	ctxWithTimeout, cancel := context.WithTimeout(
		ctx,
		calculateTimeout([]string{target}),
	)
	defer cancel()

	scanner, err := nmap.NewScanner(
		nmap.WithTargets(target),
		nmap.WithMostCommonPorts(100),
		nmap.WithServiceInfo(),
		nmap.WithSkipHostDiscovery(),
		nmap.WithOSDetection(),
		nmap.WithOSScanGuess(),
		nmap.WithScripts("vulners"),
		nmap.WithContext(ctxWithTimeout),
	)
	if err != nil {
		return s.errorResult(
				err,
				fmt.Sprintf("Failed to create Nmap scanner: %s", err.Error())),
			fmt.Errorf("failed to create nmap scanner: %w", err)
	}

	res, warnings, err := scanner.Run()
	if err := handleScanErrors(ctxWithTimeout, err, warnings, 1); err != nil {
		return s.errorResult(
				err,
				fmt.Sprintf("scan error: %s", err.Error())),
			fmt.Errorf("scan error: %w", err)
	}

	s.Logger.Info("Nmap scan completed:",
		slog.Int("hosts_up", len(res.Hosts)),
		slog.Any("time_elapsed", res.Stats.Finished.Elapsed))

	return s.procesScanResults(res, target), nil
}

func (s *NmapService) procesScanResults(res *nmap.Run, target string) tools.ToolResult {
	if len(res.Hosts) == 0 {
		return s.errorResult(fmt.Errorf("no hosts found in scan results"), "No hosts found")
	}

	host := res.Hosts[0]

	if len(host.Ports) == 0 || len(host.Addresses) == 0 {
		s.Logger.Warn("No ports or addresses found", slog.Any("host", host))
		return s.errorResult(
			fmt.Errorf("no ports or addresses found for host %s", target),
			"No ports or addresses found")
	}

	if !s.matchHostToTarget(host, target) {
		slog.Warn("Unmatched host in scan results", slog.Any("host", host))
		return s.errorResult(
			fmt.Errorf("unmatched host in scan results"),
			"Unmatched host")
	}

	nmapResult := createNmapResult(host)
	s.Logger.Debug("Nmap scan for host completed", slog.Any("nmap_result", nmapResult))

	return tools.ToolResult{
		Tool:      enums.ToolNmap,
		Result:    nmapResult,
		Timestamp: time.Now().UTC(),
	}

}

func ParseVulnersScript(script nmap.Script) ([]tools.Vulnerability, error) {
	if script.ID != "vulners" {
		return nil, fmt.Errorf("script ID is not 'vulners': %s", script.ID)
	}

	var vulnerabilities []tools.Vulnerability

	for _, table := range script.Tables {
		for _, subTable := range table.Tables {

			vulnMap := map[string]string{}
			for _, element := range subTable.Elements {
				// Store elements in a temporary Map
				vulnMap[element.Key] = element.Value
			}

			// Build Vulnerability Struct
			if id, exists := vulnMap["id"]; exists {
				var vuln tools.Vulnerability
				vuln.ID = id

				// Parse Type
				if typeStr, ok := vulnMap["type"]; ok {
					vuln.Type = typeStr
				}

				// Parse CVSS
				if cvssStr, ok := vulnMap["cvss"]; ok {
					cvss, err := strconv.ParseFloat(strings.TrimSpace(cvssStr), 64)
					if err != nil {
						slog.Error("Error parsing CVSS", slog.String("port_id", id), slog.Any("error", err))
					} else {
						vuln.CVSS = cvss
					}
				}

				// Parse Exploitable
				if exploitableStr, ok := vulnMap["is_exploit"]; ok {
					exploitable, err := strconv.ParseBool(exploitableStr)
					if err != nil {
						slog.Error("Error parsing is_exploit", slog.String("port_id", id), slog.Any("error", err))
					} else {
						vuln.Exploitable = exploitable
					}
				}

				vuln.BuildVulnersReferences()
				vulnerabilities = append(vulnerabilities, vuln)
			}

		}
	}

	return vulnerabilities, nil
}

// getMostLikelyOS checks for most likely OS considering TCP matches
func getMostLikelyOS(host nmap.Host) string {
	if len(host.OS.Matches) == 0 {
		return ""
	}

	mostLikely := ""
	maxAccuracy := 0
	for _, match := range host.OS.Matches {
		if match.Accuracy > maxAccuracy {
			mostLikely = match.Name
			maxAccuracy = match.Accuracy
		}
	}

	return mostLikely
}

func parseHostName(host nmap.Host) string {
	// If host type is IP, we won't get a Hostname
	var hostName string

	if len(host.Hostnames) > 0 {
		hostName = host.Hostnames[0].Name
	}

	return hostName
}

func parseHostAddress(host nmap.Host) string {
	var hostAddress string

	if len(host.Addresses) > 0 {
		hostAddress = host.Addresses[0].Addr
	}

	return hostAddress
}

// handleScanErrors logs warnings and processes potential scan errors.
func handleScanErrors(ctx context.Context, err error, warnings []string, targetCount int) error {
	if warnings != nil {
		slog.Default().Warn("Nmap raised warnings:", slog.Any("nmap_warnings", warnings))
	}
	if err != nil {
		if ctx.Err() == context.DeadlineExceeded {
			return fmt.Errorf("scan timeout after %d seconds", 240*targetCount)
		}
		return fmt.Errorf("scan error: %w", err)
	}
	return nil
}

// calculateTimeout calculates the scan timeout based on the number of targets.
func calculateTimeout(targets []string) time.Duration {
	timePerTarget := 240
	timeout := timePerTarget * len(targets)
	return time.Duration(timeout) * time.Second
}

// createNmapResult builds the NmapResult for a given host.
func createNmapResult(host nmap.Host) *tools.NmapResult {
	return &tools.NmapResult{
		HostName:     parseHostName(host),
		HostAddress:  parseHostAddress(host),
		MostLikelyOS: getMostLikelyOS(host),
		ScannedPorts: parsePorts(host.Ports),
	}
}

// parsePorts extracts port information from the scan results.
func parsePorts(ports []nmap.Port) []tools.PortData {
	var portDataSlice []tools.PortData
	for _, port := range ports {
		p := tools.PortData{
			ID:       port.ID,
			Protocol: port.Protocol,
			Service: tools.Service{
				Name:       port.Service.Name,
				Version:    port.Service.Version,
				Confidence: port.Service.Confidence,
			},
			Product: port.Service.Product,
			State:   port.State.State,
		}

		for _, script := range port.Scripts {
			if script.ID != "vulners" {
				continue
			}

			vulns, err := ParseVulnersScript(script)
			if err != nil {
				slog.Error("Error parsing Vulners Script", slog.Any("error", err))
				continue
			}

			p.Vulnerabilities = append(p.Vulnerabilities, vulns...)
		}

		portDataSlice = append(portDataSlice, p)
	}

	return portDataSlice

}

func (s *NmapService) matchHostToTarget(host nmap.Host, target string) bool {

	// Check addresses (IPv4, IPv6)
	for _, address := range host.Addresses {
		ip := net.ParseIP(address.Addr)
		if ip != nil {
			if ip.String() == target {
				return true
			}
		}
	}

	// Check hostnames (Domains) if no match was found with address
	for _, hostname := range host.Hostnames {
		if hostname.Name == target {
			return true
		}
	}

	return false
}

// errorResult is a helper function to create an error ToolResult.
func (s *NmapService) errorResult(err error, message string) tools.ToolResult {
	s.Logger.Error(message, slog.Any("error", err))
	return tools.ToolResult{
		Tool:   enums.ToolNmap,
		Result: &tools.NmapResult{},
		Err: &tools.ToolError{
			Code:    enums.ToolError,
			Message: message,
		},
		Timestamp: time.Now().UTC(),
	}
}
