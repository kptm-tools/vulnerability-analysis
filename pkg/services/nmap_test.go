package services

import (
	"reflect"
	"testing"

	"github.com/Ullaakut/nmap/v2"
)

func Test_ParseVulnersScript(t *testing.T) {
	testCases := []struct {
		name        string
		service     *NmapService
		input       nmap.Script
		expected    []Vulnerability
		expectedErr bool
	}{
		{
			name:    "Script with several vulnerabilities",
			service: NewNmapService(),
			input: nmap.Script{
				ID: "vulners",
				Tables: []nmap.Table{
					{
						Elements: []nmap.Element{
							{Key: "id", Value: "CVE-2021-25216"},
							{Key: "type", Value: "cve"},
							{Key: "cvss", Value: "9.8"},
							{Key: "is_exploit", Value: "false"},
						},
					},
					{
						Elements: []nmap.Element{
							{Key: "id", Value: "MSF:AUXILIARY-DOS-DNS-BIND_TSIG_BADTIME-"},
							{Key: "type", Value: "metasploit"},
							{Key: "cvss", Value: "8.6"},
							{Key: "is_exploit", Value: "true"},
						},
					},
				},
			},
			expected: []Vulnerability{
				{
					ID:          "CVE-2021-25216",
					Type:        "cve",
					CVSS:        9.8,
					Exploitable: false,
				},
				{
					ID:          "MSF:AUXILIARY-DOS-DNS-BIND_TSIG_BADTIME-",
					Type:        "metasploit",
					CVSS:        8.6,
					Exploitable: true,
				},
			},
			expectedErr: false,
		},
		{
			name: "Script with no vulnerabilities",
			input: nmap.Script{
				ID: "vulners",
				Tables: []nmap.Table{
					{
						Elements: []nmap.Element{},
					},
				},
			},
			expected:    []Vulnerability{},
			expectedErr: false,
		},
		{
			name: "Non-Vulners Script",
			input: nmap.Script{
				ID: "custom-script123",
				Tables: []nmap.Table{
					{
						Elements: []nmap.Element{},
					},
				},
			},
			expected:    []Vulnerability{},
			expectedErr: true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result, err := tc.service.ParseVulnersScript(tc.input)
			if err != nil {
				if !tc.expectedErr {
					t.Errorf("Got unexpected error: %v", err)
				}
			}

			if reflect.DeepEqual(result, tc.expected) {
				t.Errorf("expected `%+v`, got `%+v`", tc.expected, result)
			}
		})
	}
}

func Test_buildVulnersReference(t *testing.T) {
	testCases := []struct {
		name     string
		input    Vulnerability
		expected string
	}{
		{
			name: "Vulnerability with ID and Type",
			input: Vulnerability{
				ID:   "ID123",
				Type: "cve",
			},
			expected: "https://vulners.com/cve/ID123",
		},
		{
			name: "Vulnerability with only ID",
			input: Vulnerability{
				ID: "ID123",
			},
			expected: "https://vulners.com//ID123",
		},
		{
			name: "Vulnerability with only Type",
			input: Vulnerability{
				Type: "cve",
			},
			expected: "https://vulners.com/cve/",
		},
		{
			name:     "Vulnerability without ID or Type",
			input:    Vulnerability{},
			expected: "https://vulners.com//",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			res := buildVulnersReference(tc.input.ID, tc.input.Type)
			if res != tc.expected {
				t.Errorf("Expected `%s`, got `%s`", tc.expected, res)
			}
		})
	}
}
