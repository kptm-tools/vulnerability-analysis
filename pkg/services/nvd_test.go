package services

import (
	"net/http"
	"net/http/httptest"
	"net/url"
	"os"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_isValidCPE(t *testing.T) {
	testCases := []struct {
		name     string
		inputCPE string
		wantErr  bool
	}{
		{
			name:     "Valid CPE",
			inputCPE: "cpe:2.3:o:microsoft:windows_10:1607:*:*:*:*:*:*:*",
			wantErr:  false,
		},
		{
			name:     "Invalid CPE length",
			inputCPE: "cpe:2.3:*:microsoft:windows_10:1607:*:*:*:*:*:*:*:*:*:*:*",
			wantErr:  true,
		},
		{
			name:     "Invalid CPE part",
			inputCPE: "cpe:2.3:*:microsoft:windows_10:1607:*:*:*:*:*:*:*",
			wantErr:  true,
		},
		{
			name:     "Invalid CPE version",
			inputCPE: "cpe:2.3:o:microsoft:windows_10:*:*:*:*:*:*:*:*",
			wantErr:  true,
		},
		{
			name:     "Short CPE",
			inputCPE: "cpe:2.3:o:microsoft:windows_10:*:*:*:*",
			wantErr:  true,
		},
		{
			name:     "Wrong Prefix CPE",
			inputCPE: "cp:2.3:o:microsoft:windows_10:*:*:*:*",
			wantErr:  true,
		},
		{
			name:     "Wrong Version CPE",
			inputCPE: "cpe:2.4:o:microsoft:windows_10:*:*:*:*",
			wantErr:  true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			err := isValidCPE(tc.inputCPE)
			if tc.wantErr {
				assert.Error(t, err)
			} else {
				assert.NoError(t, err)
			}
		})
	}
}

func Test_fetchNvdDataByCPE_SuccessWithResults(t *testing.T) {
	// 1. Mock HTTP server
	server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Assert request parameters (CPE in query)
		encodedCPE := url.QueryEscape("cpe:2.3:o:microsoft:windows_10:1607:*:*:*:*:*:*:*")
		if !strings.Contains(r.URL.RawQuery, "cpeName="+encodedCPE) {
			t.Errorf("Expected CPE query parameter in request URL %s, got %v", encodedCPE, r.URL.RawQuery)
		}
		// Load successful API response from testdata file
		content, err := os.ReadFile("testdata/nvd_api_success.json")
		if err != nil {
			t.Fatalf("Failed to read test data file: %v", err)
		}
		w.WriteHeader(http.StatusOK)
		w.Header().Set("Content-Type", "application/json")
		w.Write(content)
	}))
	defer server.Close()

	// 2. Modifyt base API URL for testing
	baseNvdApiURL = server.URL // Set to mock server URL

	// 3. Call fetchNvdDataByCPE with a valid CPE
	cpe := "cpe:2.3:o:microsoft:windows_10:1607:*:*:*:*:*:*:*"
	response, err := fetchNvdDataByCPE(cpe, baseNvdApiURL)
	// 4. Assertions
	if err != nil {
		t.Errorf("Expected no error, but got: %v", err)
	}
	if response == nil {
		t.Fatalf("Expected non-nil NvdApiResponse, but got nil")
	}
	if response.TotalResults == 0 {
		t.Errorf("Expected TotalResults > 0, got 0") // Adjust assertion based on your test data
	}
}

func Test_standardizeCPE(t *testing.T) {
	tests := []struct {
		name string // description of this test case
		// Named input parameters for target function.
		cpe     string
		want    string
		wantErr bool
	}{
		{
			name:    "Pure-FTPd",
			cpe:     "cpe:/a:pureftpd:pure-ftpd",
			want:    "",
			wantErr: true,
		},

		{
			name:    "OpenSSH with version",
			cpe:     "cpe:/a:openbsd:openssh:8.0",
			want:    "cpe:2.3:a:openbsd:openssh:8.0:*:*:*:*:*:*:*",
			wantErr: false,
		},
		{
			name:    "Exim with version",
			cpe:     "cpe:/a:exim:exim:4.98",
			want:    "cpe:2.3:a:exim:exim:4.98:*:*:*:*:*:*:*",
			wantErr: false,
		},
		{
			name:    "ISC BIND with version",
			cpe:     "cpe:/a:isc:bind:9.11.36",
			want:    "cpe:2.3:a:isc:bind:9.11.36:*:*:*:*:*:*:*",
			wantErr: false,
		},
		{
			name:    "Red Hat EL 8 (OS)",
			cpe:     "cpe:/o:redhat:enterprise_linux:8",
			want:    "cpe:2.3:o:redhat:enterprise_linux:8:*:*:*:*:*:*:*",
			wantErr: false,
		},
		{
			name:    "Dovecot (no version)",
			cpe:     "cpe:/a:dovecot:dovecot",
			want:    "",
			wantErr: true,
		},
		{
			name:    "Incomplete NVD format",
			cpe:     "cpe:/o:microsoft:windows_10:1607",
			want:    "cpe:2.3:o:microsoft:windows_10:1607:*:*:*:*:*:*:*",
			wantErr: false,
		},
		{
			name:    "Invalid prefix",
			cpe:     "invalid-cpe:/a:test:test",
			want:    "",
			wantErr: true,
		},
		{
			name:    "Too short CPE",
			cpe:     "cpe:/a:test",
			want:    "",
			wantErr: true,
		},
		{
			name:    "Empty string",
			cpe:     "",
			want:    "",
			wantErr: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, gotErr := standardizeCPE(tt.cpe)
			if tt.wantErr {
				assert.Error(t, gotErr)
			} else {
				assert.NoError(t, gotErr)
			}

			assert.Equal(t, tt.want, got)
		})
	}
}
